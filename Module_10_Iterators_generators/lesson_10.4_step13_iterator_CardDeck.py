"""
Итератор CardDeck
Реализуйте класс CardDeck, порождающий итераторы, конструктор которого не принимает никаких аргументов.

Итератор класса CardDeck должен генерировать последовательность из 
52
52 игральных карт, а после возбуждать исключение StopIteration. Каждая карта должна представлять собой строку в следующем формате:

<номинал> <масть>
Например, 7 пик, валет треф, дама бубен, король червей, туз пик.

Примечание 1. Карты, генерируемые итератором, должны располагаться сначала по величине номинала, затем масти.

Примечание 2. Старшинство мастей по возрастанию: пики, трефы, бубны, червы. Старшинство карт в масти по возрастанию: двойка, тройка, четверка, пятерка, шестерка, семерка, восьмерка, девятка, десятка, валет, дама, король, туз.

Примечание 3. Масти не требуют склонения и независимо от номинала должны сохранять следующее написание: пик, треф, бубен, червей.

Примечание 4. В тестирующую систему сдайте программу, содержащую только необходимый класс CardDeck.

https://stepik.org/lesson/669733/step/13?unit=667881
"""


class CardDeck:
    def __init__(self) -> None:
        self.suit = ("пик", "треф", "бубен", "червей")
        self.value = ("2", "3", "4", "5", "6", "7", "8", "9", "10", 
                      "валет", "дама", "король", "туз")
        self.counter = -1
        self.count_maps = 52

    def __iter__(self):
        return self

    def __next__(self) -> str:
        self.counter += 1
        if self.counter == self.count_maps:
            raise StopIteration
        return f"{self.value[self.counter%13]} {self.suit[self.counter//13]}"



cards = list(CardDeck())

print(cards[9])
print(cards[23])
print(cards[37])
print(cards[51])